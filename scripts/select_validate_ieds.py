import numpy as np
import pandas as pd
import mne
import os
import yaml
from scipy.io import savemat
import matplotlib
matplotlib.use('Qt5Agg')  # Forcer le backend Qt5 interactif
import matplotlib.pyplot as plt


# Charger le fichier de configuration YAML
with open('C:/Users/boyer/github/ECOFEC/data/config/d3bd_ied_selection.yaml', 'r') as f:
    config = yaml.safe_load(f)

# Lire les chemins des fichiers depuis la configuration
csv_file = config['csv_file']
edf_file = config['edf_file']
text_file_path = config['text_file_path']

# Charger le fichier CSV
df_csv = pd.read_csv(csv_file)

# Charger le fichier EDF
raw_edf = mne.io.read_raw_edf(edf_file, preload=True)

# S√©lectionner les canaux souhait√©s
channels = config['channels']
raw_edf.pick_channels(channels)

# Ordre des √©lectrodes 
ordre_electrodes = config['ordre_electrodes']

# Convertir la colonne 'Tmu' de microsecondes en secondes
df_csv['Tmu_seconds'] = df_csv['Tmu'] / 1e6

# Fonction pour d√©finir les p√©riodes
def definir_periodes(df, periodes):
    df['periode'] = None
    for periode in periodes:
        start = periode['start']
        end = periode['end'] if periode['end'] != 'max' else df['Tmu_seconds'].max()
        mask = (df['Tmu_seconds'] >= start) & (df['Tmu_seconds'] <= end)
        df.loc[mask, 'periode'] = periode['name']
    return df

# Appliquer la d√©finition des p√©riodes
df_csv = definir_periodes(df_csv, config['periodes'])

# Fonction pour calculer les occurrences et les ratios par p√©riode
def calculer_occurrences_et_ratios(df):
    ratios = {}
    periodes = df['periode'].unique()
    for periode in periodes:
        df_periode = df[df['periode'] == periode]
        occurrences = df_periode['Electrode'].value_counts()
        total_occurrences = occurrences.sum()
        ratios[periode] = (occurrences / total_occurrences) * 100
    return ratios

# Calculer les occurrences et les ratios
ratios_par_periode = calculer_occurrences_et_ratios(df_csv)

# Afficher les ratios en pourcentage pour v√©rifier
for periode, ratios in ratios_par_periode.items():
    print(f"Ratios pour la p√©riode {periode}:")
    print(ratios.round(0))  # Arrondir √† deux d√©cimales

# Fonction pour transformer les ratios en nombre d‚Äôoccurrences √† valider
def generer_n_target_dict(ratios_par_periode, periode_selectionnee, n_total):
    """
    G√©n√®re un dictionnaire avec le nombre d'√©v√©nements √† s√©lectionner par √©lectrode
    en fonction des ratios et du nombre total souhait√©.

    :param ratios_par_periode: dictionnaire des ratios calcul√©s par p√©riode
    :param periode_selectionnee: p√©riode √† consid√©rer ('Eveil', 'Sommeil', etc.)
    :param n_total: nombre total d'√©v√©nements √† s√©lectionner
    :return: dictionnaire {√©lectrode: n_occurrences}
    """
    if periode_selectionnee not in ratios_par_periode:
        raise ValueError(f"La p√©riode '{periode_selectionnee}' n'existe pas dans les ratios calcul√©s.")

    ratios = ratios_par_periode[periode_selectionnee]
    n_target_dict = (ratios / 100 * n_total).round().astype(int)

    # S'assurer que la somme soit exactement √©gale √† n_total (ajustement si besoin)
    diff = n_total - n_target_dict.sum()
    if diff != 0:
        # Trier par ratio d√©croissant pour prioriser les plus fr√©quents
        sorted_electrodes = ratios.sort_values(ascending=False).index
        for electrode in sorted_electrodes:
            n_target_dict[electrode] += np.sign(diff)
            diff -= np.sign(diff)
            if diff == 0:
                break

    return n_target_dict.to_dict()

def valider_evenements_selectionnes(raw, selection, n_target_dict, periode=None):
    validation = []
    event_count = {electrode: 0 for electrode in n_target_dict}

    if periode:
        selection = selection[selection['periode'] == periode]

    electrodes_ordered = list(n_target_dict.keys())

    for electrode in electrodes_ordered:
        selection_electrode = selection[selection['Electrode'] == electrode]
        selection_electrode = selection_electrode.sort_values('Tmu_seconds')

        for idx, row in selection_electrode.iterrows():
            if event_count[electrode] >= n_target_dict[electrode]:
                break

            event_time = row['Tmu_seconds']
            start = max(0, event_time - 0.5)
            end = min(raw.times[-1], event_time + 0.5)

            fig = raw.plot(start=start, duration=1.0, show=False)
            plt.title(f"√âlectrode {electrode} ¬∑ {row['periode']} @ {event_time:.3f}s", pad=20)
            plt.show()

            valid = input(f"Valider cet √©v√©nement ? (y/n/exit) : ").strip().lower()
            if valid == 'exit':
                print("Validation interrompue par l'utilisateur.")
                return pd.DataFrame(validation)
            elif valid == 'y':
                validation.append(row)
                event_count[electrode] += 1
                print(f"‚úÖ Valid√© ({event_count[electrode]}/{n_target_dict[electrode]} pour {electrode})")
            else:
                print("‚ùå Rejet√©")

        print(f"‚û°Ô∏è  √âlectrode {electrode} termin√©e : {event_count[electrode]}/{n_target_dict[electrode]} valid√©s.\n")

    print("‚úÖ Validation termin√©e pour toutes les √©lectrodes.")
    return pd.DataFrame(validation)

# Sp√©cifier la p√©riode : 'Eveil' ou 'Sommeil'
periode_selectionnee = input("S√©lectionner la p√©riode ('Eveil' ou 'Sommeil') ou appuyer sur Entr√©e pour toutes les p√©riodes : ").strip()

# D√©finir le nombre total d‚Äô√©v√©nements √† s√©lectionner
n_total_evenements = int(input("Nombre total d'√©v√©nements √† valider pour cette p√©riode : ").strip())

n_target_dict = generer_n_target_dict(ratios_par_periode, periode_selectionnee, n_total_evenements)

# ‚ûï Affichage du dictionnaire pour v√©rification
print(f"\nüéØ Nombre d'√©v√©nements √† valider pour chaque √©lectrode ({periode_selectionnee}) :")
for electrode, n in n_target_dict.items():
    print(f"  - {electrode} : {n}")

# Appel de la fonction avec df_csv
validated_events = valider_evenements_selectionnes(raw_edf, df_csv, n_target_dict, periode_selectionnee)


# Affichage du r√©sultat des √©v√©nements valid√©s
print("√âv√©nements valid√©s :")
print(validated_events)

# Fonction pour enregistrer les √©v√©nements s√©lectionn√©s dans un fichier .mat et un fichier texte
def enregistrer_evenements(validated_events, config, mat_filename_base, txt_filename_base, ratios_par_periode):
    """
    Enregistre les √©v√©nements valid√©s dans un fichier .mat et un fichier texte, en incluant les ratios par p√©riode.

    :param validated_events: DataFrame des √©v√©nements valid√©s
    :param config: Dictionnaire de configuration charg√© depuis le fichier YAML
    :param mat_filename_base: Nom de base pour le fichier .mat
    :param txt_filename_base: Nom de base pour le fichier texte
    :param ratios_par_periode: Dictionnaire des ratios calcul√©s pour chaque p√©riode
    """
    # R√©cup√©rer le chemin de sauvegarde depuis la configuration
    save_folder = config['save_folder']

    # Filtrer les √©v√©nements par p√©riode (Eveil, Sommeil)
    periodes_valides = validated_events['periode'].unique()

    for periode in periodes_valides:
        if periode in ['Eveil', 'Sommeil']:  # Nous nous int√©ressons seulement aux p√©riodes "Eveil" et "Sommeil"

            # Cr√©er le nom du fichier .mat
            mat_filename_period = mat_filename_base.replace(".mat", f"_{periode}.mat")
            mat_filepath = os.path.join(save_folder, mat_filename_period)

            # Cr√©er le nom du fichier texte
            txt_filename_period = txt_filename_base.replace(".txt", f"_{periode}.txt")
            txt_filepath = os.path.join(save_folder, txt_filename_period)

            # Filtrer les √©v√©nements pour la p√©riode courante
            events_periode = validated_events[validated_events['periode'] == periode]

            # Enregistrement dans un fichier .mat
            event_times = events_periode['Tmu_seconds'].values
            electrodes = events_periode['Electrode'].values

            # Utiliser la fonction fournie pour le format .mat
            sauvegarder_evenements_mat(event_times, electrodes, mat_filepath)
            print(f"√âv√©nements enregistr√©s dans le fichier .mat : {mat_filepath}")

            # Enregistrement dans un fichier texte
            with open(txt_filepath, 'w') as f:
                # √âcrire les en-t√™tes
                f.write("Electrode, Tmu_seconds, Periode, Ratio\n")

                # Ajouter les √©v√©nements et leurs ratios
                for _, row in events_periode.iterrows():
                    # Extraire le ratio correspondant √† l'√©lectrode pour cette p√©riode
                    ratio = ratios_par_periode.get(periode, {}).get(row['Electrode'], 0)
                    f.write(f"{row['Electrode']}, {row['Tmu_seconds']:.6f}, {row['periode']}, {ratio:.2f}\n")
            
            print(f"√âv√©nements enregistr√©s dans le fichier texte : {txt_filepath}")

# Fonction pour enregistrer les occurrences dans un fichier .mat (structure adapt√©e)
def sauvegarder_evenements_mat(event_times, electrodes, mat_file_path):
    """
    Enregistre les √©v√©nements dans un fichier .mat avec la structure sp√©cifi√©e.

    :param event_times: Liste des timestamps des √©v√©nements
    :param electrodes: Liste des √©lectrodes associ√©es aux √©v√©nements
    :param mat_file_path: Chemin complet pour enregistrer le fichier .mat
    """
    events = {
        'onsets': np.array(event_times),
        'descriptions': np.array(electrodes, dtype=np.object_)  # Conversion en objet pour le format MATLAB
    }
    savemat(mat_file_path, events)

# Exemple d'utilisation apr√®s validation des √©v√©nements
mat_filename_base = "evenements_valides.mat"  
txt_filename_base = "evenements_valides_avec_ratios.txt"

# Sauvegarder les √©v√©nements valid√©s dans les fichiers avec les ratios pour "Eveil" et "Sommeil"
enregistrer_evenements(validated_events, config, mat_filename_base, txt_filename_base, ratios_par_periode)
